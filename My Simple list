//push_back   -добавление элемента в конец списка
//pop_back    -удаление последнего элемента
//push_front  -добавление элемента в начало списка
//pop_front   -удаление первого элемента
//insert 
//removeAt


#include <iostream>
#include<string>



using namespace std;

template<typename T>
class list
{
public:

	list();
	~list();
	int get_size() { return size; }
	void push_back(T data);
	void pop_back();
	void push_front(T data);
	void pop_front();
	void clear();
	void insert(T data,int index);
	void removeAt(int index);

	T& operator[](const int index)
	{
		int count = 0;
		Node<T>* current = this->head;
		while (count!=index)
		{
			current = current->pNext;
			count++;
		}
		return current->data;
	}

private:

	template<typename T>
	class Node
	{
	public:
		Node* pNext;
		T data;

		Node(T data = T(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};


	Node <T>* head;
	int size;
};


template<typename T>
list<T>::list()
{
	size = 0;
	head = nullptr;
}

template<typename T>
list<T>::~list()
{
	clear();
}

template<typename T>
void list<T>::push_back(T data)
{
	if (head == nullptr)
	{
		head = new Node<T>(data);
	}
	else
	{
		Node<T>* current = this->head;
		while (current->pNext != nullptr)
		{
			current = current->pNext;
		}
		current->pNext = new Node<T>(data);
	}
	size++;
}

template<typename T>
void list<T>::pop_back()
{

	Node<T>* temp = head;
	while (temp->pNext!=nullptr)
	{
		temp = temp->pNext;
	}
	delete temp;
	size--;

}

template<typename T>
void list<T>::push_front(T data)
{
	head = new Node<T>(data, head);
	size++;
}

template<typename T>
void list<T>::pop_front()
{
	Node<T>* temp = head;
	head = head->pNext;
	delete temp;
	size--;
}

template<typename T>
void list<T>::clear()
{
	while (size)
	{
		pop_front();
	}
}

template<typename T>
void list<T>::insert(T data, int index)
{
	if (index==0 )
	{
		push_front(data);
	}
	else
	{
		Node<T>* temp = head;
		for (int i = 0; i < index-1; i++)
		{
			temp = temp->pNext;

		}
		Node<T>* newtemp = new Node<T>(data,temp->pNext);
	    temp->pNext=newtemp;
		size++;
	}
	
}

template<typename T>
void list<T>::removeAt(int index)
{
	if (index==0)
	{
		pop_front();
			
	}
	else 
	{
		Node<T>* temp = head;
		for (int i = 0; i < index - 1; i++)
		{
			temp = temp->pNext;

		}
		Node<T>* newtemp = temp->pNext;
		temp->pNext = newtemp->pNext;
		delete newtemp;
		size--;
	}
}


int main()
{
	setlocale(LC_ALL, "ru");

	list<int> lst;
	lst.push_back(23);
	lst.push_back(67);
	lst.push_back(591);
	lst.push_front(55);
	lst.insert(3, 1);
	lst.pop_back();
	lst.pop_front();
	lst.removeAt(1);
	for (int i = 0; i < lst.get_size(); i++)
	{
		cout << lst[i] << endl;
	}

}
